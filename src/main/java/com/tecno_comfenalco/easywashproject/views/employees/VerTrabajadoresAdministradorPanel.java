/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tecno_comfenalco.easywashproject.views.employees;

import java.util.List;

import javax.swing.JOptionPane;

import com.tecno_comfenalco.easywashproject.models.Employee;
import com.tecno_comfenalco.easywashproject.repository.FileBasedRepsitoryImpl.EmployeeRepositoryImpl;

/**
 *
 * @author jacob
 */
public class VerTrabajadoresAdministradorPanel extends javax.swing.JPanel {

    /**
     * Creates new form VerTrabajadoresAdministradorPanel1
     */
    public VerTrabajadoresAdministradorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnDeleteEmployee = new javax.swing.JButton();
        btnCreateEmployee = new javax.swing.JButton();
        btnEditEmployee = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel1.setText("Ver Trabajadores");
        bg.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, -1));

        // 1. Se llama a la lista de servicio directamente del archivo JSON
        List<Employee> employees = new EmployeeRepositoryImpl().readAll();

        // 2. Se inicializan las columnas y filas que se van a utilizar
        Object[][] data = new Object[employees.size()][5];

        // 3. Se rellenan las filas segun su columna respectiva
        for (int i = 0; i < employees.size(); i++) {
            Employee e = employees.get(i);
            data[i][0] = e.getFullname();
            data[i][1] = e.getDocumentNumber();
            data[i][2] = e.getSalary();
            data[i][3] = e.getMailAddress();
            data[i][4] = e.getPhoneNumber();
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[] {
                        "Nombre", "Documento", "Salario", "Correo", "Telefono"
                }));
        jScrollPane1.setViewportView(jTable1);

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 57, 600, 270));

        btnDeleteEmployee.setBackground(new java.awt.Color(153, 153, 153));
        btnDeleteEmployee.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnDeleteEmployee.setText("Eliminar Trabajador");
        btnDeleteEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bg.add(btnDeleteEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 170, 40));

        btnCreateEmployee.setBackground(new java.awt.Color(153, 153, 153));
        btnCreateEmployee.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnCreateEmployee.setText("Añadir Trabajador");
        btnCreateEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bg.add(btnCreateEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 170, 40));

        btnEditEmployee.setBackground(new java.awt.Color(153, 153, 153));
        btnEditEmployee.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnEditEmployee.setText("Editar Trabajador");
        btnEditEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        // bg.add(btnEditEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 160, 40));

        btnCreateEmployee.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });

        btnDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEmployeeActionPerformed(evt);
            }
        });

        add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 400));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAddServiceActionPerformed
        CreateNewEmployeedAdministrador createNewEmployeedAdministrador = new CreateNewEmployeedAdministrador();
        createNewEmployeedAdministrador.setVisible(true);
    }// GEN-LAST:event_btnAddServiceActionPerformed

    private void btnDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnDeleteEmployeeActionPerformed
        String selectedEmployee = jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString();
        System.out.println("Selected Employee: " + selectedEmployee);

        if (selectedEmployee != null) {
            EmployeeRepositoryImpl employeeRepository = new EmployeeRepositoryImpl();
            // Eliminar el empleado seleccionado
            employeeRepository.delete(employeeRepository.findByDocumentNumber(selectedEmployee));

            // Actualizar la tabla después de eliminar el empleado
            List<Employee> employees = employeeRepository.readAll();
            Object[][] data = new Object[employees.size()][5];
            for (int i = 0; i < employees.size(); i++) {
                Employee e = employees.get(i);
                data[i][0] = e.getFullname();
                data[i][1] = e.getDocumentNumber();
                data[i][2] = e.getSalary();
                data[i][3] = e.getMailAddress();
                data[i][4] = e.getPhoneNumber();
            }
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    new String[] {
                            "Nombre", "Documento", "Salario", "Correo", "Telefono"
                    }));

            JOptionPane.showMessageDialog(this, "Trabajador eliminado correctamente",
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un trabajador",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_btnDeleteEmployeeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnDeleteEmployee;
    private javax.swing.JButton btnCreateEmployee;
    private javax.swing.JButton btnEditEmployee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
