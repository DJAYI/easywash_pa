/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tecno_comfenalco.easywashproject.views.services;

import java.util.List;

import javax.swing.JOptionPane;

import com.tecno_comfenalco.easywashproject.models.Service;
import com.tecno_comfenalco.easywashproject.models.Service;
import com.tecno_comfenalco.easywashproject.repository.FileBasedRepsitoryImpl.ServiceRepositoryImpl;
import com.tecno_comfenalco.easywashproject.repository.FileBasedRepsitoryImpl.ServiceRepositoryImpl;

/**
 *
 * @author jacob
 */
public class VerServiciosAdministradorPanel extends javax.swing.JPanel {

    /**
     * Creates new form VerServiciosAdministradorPanel1
     */
    public VerServiciosAdministradorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnDeleteService = new javax.swing.JButton();
        btnAddService = new javax.swing.JButton();
        btnEditService = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel1.setText("Ver Servicios");
        bg.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        // 1. Se llama a la lista de servicio directamente del archivo JSON
        List<Service> servicios = new ServiceRepositoryImpl().readAll();

        // 2. Se inicializan las columnas y filas que se van a utilizar
        Object[][] data = new Object[servicios.size()][4];

        // 3. Se rellenan las filas segun su columna respectiva
        for (int i = 0; i < servicios.size(); i++) {
            Service s = servicios.get(i);
            data[i][0] = s.getId();
            data[i][1] = s.getName();
            data[i][2] = s.getPrice();
            data[i][3] = s.getDescription();
        }

        // 4. Se asigna el modelo de datos y columnas a la tabla
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                data,
                new String[] { "Id", "Nombre", "Precio", "Concepto" }));

        jScrollPane1.setViewportView(jTable1);

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 57, 600, 280));

        btnDeleteService.setBackground(new java.awt.Color(153, 153, 153));
        btnDeleteService.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnDeleteService.setText("Eliminar Servicio");
        btnDeleteService.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bg.add(btnDeleteService, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 350, 180, 40));

        btnAddService.setBackground(new java.awt.Color(153, 153, 153));
        btnAddService.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnAddService.setText("Añadir Servicio");
        btnAddService.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bg.add(btnAddService, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 180, 40));

        btnEditService.setBackground(new java.awt.Color(153, 153, 153));
        btnEditService.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnEditService.setText("Editar Servicio");
        btnEditService.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        // bg.add(btnEditService, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, 180, 40));

        btnAddService.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });

        btnDeleteService.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteServiceActionPerformed(evt);
            }
        });

        add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 400));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {
        CreateNewServiceAdministrador createNewService = new CreateNewServiceAdministrador();
        createNewService.setVisible(true);
    }

    private void btnDeleteServiceActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedService = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        System.out.println("Selected Service: " + selectedService);

        if (selectedService != null) {
            ServiceRepositoryImpl ServiceRepository = new ServiceRepositoryImpl();
            // Convertir el valor seleccionado a Long
            Long serviceId = null;
            try {
                serviceId = Long.parseLong(selectedService);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de servicio inválido",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Eliminar el empleado seleccionado
            ServiceRepository.delete(ServiceRepository.findById(serviceId));

            // 1. Se llama a la lista de servicio directamente del archivo JSON
            List<Service> servicios = new ServiceRepositoryImpl().readAll();

            // 2. Se inicializan las columnas y filas que se van a utilizar
            Object[][] data = new Object[servicios.size()][4];

            // 3. Se rellenan las filas segun su columna respectiva
            for (int i = 0; i < servicios.size(); i++) {
                Service s = servicios.get(i);
                data[i][0] = s.getId();
                data[i][1] = s.getName();
                data[i][2] = s.getPrice();
                data[i][3] = s.getDescription();
            }

            // 4. Se asigna el modelo de datos y columnas a la tabla
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    new String[] { "Id", "Nombre", "Precio", "Concepto" }));

            JOptionPane.showMessageDialog(this, "Trabajador eliminado correctamente",
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un trabajador",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnDeleteService;
    private javax.swing.JButton btnAddService;
    private javax.swing.JButton btnEditService;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
